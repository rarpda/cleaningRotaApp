swagger: "2.0"
info:
  description: "This API is for the cleaning rota."
  version: "0.0.1"
  title: "Cleaning Rota"
  contact:
    email: "ricardoarpapt@gmail.com"
tags:
- name: "task"
  description: "Everything about task."
schemes:
- "https"

paths:
  /task:
    get:
      tags:
      - "Task"
      summary: "Get list of all tasks."
      produces:
      - "application/json"
      responses:
        "200":
          description: "Produces json list of tasks"
          schema:
            $ref: "#/definitions/Task"
        "500":
          description: "Server side error"
      security:
      - api_key: []
    post:
      tags:
      - "task"
      summary: "Add a new task to the rota."
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "400":
            description: "Bad request"
      security:
      - api_key: []
  /task/{taskId}:
    get:
      tags:
      - "task"
      summary: "Find task by ID"
      description: "Returns a single task"
      operationId: "getTaskById"
      produces:
      - "application/json"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of the task to return"
        required: true
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: "Task not found"
      security:
      - api_key: []
    put:
      tags:
      - "task"
      summary: "Update the task"
      description: "Updates the task with new object."
      operationId: "updateUser"
      parameters:
      - name: "taskId"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: body
        name: markComplete
        description: Optional description in *Markdown*
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        "201":
          description: "Task updated"
        "400":
          description: "Invalid task supplied"
      security:
      - api_key: []
    delete:
      tags:
      - "task"
      summary: "Delete task"
      description: "Delete task in the rota."
      operationId: "deleteId"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of the task to delete"
        required: true
        type: "string"
        format: "string"
      responses:
        "200":
          description: "Deleted"
        "400":
          description: "Could not delete task"
  /task/{taskId}/markComplete:
    patch:
      tags:
      - "task"
      summary: "Mark task as completed."
      description: "Shows nothing"
      parameters:
      - name: "taskId"
        in: "path"
        description: "ID of the task to return"
        required: true
        type: "string"
        format: "string"
      - in: body
        name: markComplete
        description: Optional description in *Markdown*
        required: true
        schema:
          $ref: '#/definitions/MarkCompleted'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: "Invalid ID supplied"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  MarkCompleted:
    type: "object"
    required:
    - "LastCompleteDate"
    - "LastPersonToComplete"
    properties:
      LastCompleteDate:
        description: "Last date completed"
        type: "string"
      LastPersonToComplete:
        description: "Last person to mark as complete"
        type: "string"
  Task:
    type: "object"
    required:
    - "id"
    - "TaskName"
    properties:
      id:
        description: "Unique ID of object."
        type: "string"
        example: "A2E2-LP021"
      TaskName:
        type: "string"
        description: "Name of the task."
        example: "Cleaning floors"
      LastCompleteDate:
        type: "string"
        example: "02/10/2021"
      Duration:
        type: "number"
        example: "1" 
      Frequency:
        type: "number"
        example: "1"  
      PersonAssigned:
        type: "string"
        example: "Pablo"      
      LastPersonToComplete:
        type: "string"
        example: "Pablo"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"